---
import Layout from '../../layouts/Layout.astro';
import MealCard from '../../components/MealCard.jsx';

// Obtenemos el nombre del país desde la URL (ej: /country/italian -> country = "italian")
const { country } = Astro.params;

// Verificamos que country existe y convertimos a formato adecuado para la API
if (!country) {
  return Astro.redirect('/countries');
}

const countryName = country.charAt(0).toUpperCase() + country.slice(1);

// Hacemos la llamada a la API para obtener las comidas de ese país
let meals: any[] = [];
let error = '';

try {
  const response = await fetch(
    `https://www.themealdb.com/api/json/v1/1/filter.php?a=${countryName}`
  );
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  const data = await response.json();
  meals = data.meals || []; // Usamos || [] por si no hay resultados
} catch (e) {
  error = `Error al cargar recetas: ${e instanceof Error ? e.message : 'Error desconocido'}`;
  console.error('Error fetching meals:', e);
}

// Traducciones de países al español
const countryTranslations: { [key: string]: string } = {
  'American': 'Estadounidense',
  'British': 'Británica',
  'Canadian': 'Canadiense',
  'Chinese': 'China',
  'Croatian': 'Croacia',
  'Dutch': 'Holanda',
  'Egyptian': 'Egipto',
  'Filipino': 'Filipinas',
  'French': 'Francia',
  'Greek': 'Grecia',
  'Indian': 'India',
  'Irish': 'Irlanda',
  'Italian': 'Italia',
  'Jamaican': 'Jamaica',
  'Japanese': 'Japón',
  'Kenyan': 'Kenia',
  'Malaysian': 'Malasia',
  'Mexican': 'México',
  'Moroccan': 'Marruecos',
  'Polish': 'Polonia',
  'Portuguese': 'Portugal',
  'Russian': 'Rusia',
  'Spanish': 'España',
  'Thai': 'Tailandia',
  'Tunisian': 'Túnez',
  'Turkish': 'Turquía',
  'Ukrainian': 'Ucrania',
  'Uruguayan': 'Uruguay',
  'Vietnamese': 'Vietnam'
};

const displayCountryName = countryTranslations[countryName] || countryName;

// Obtenemos las categorías únicas de las recetas de este país
const categories = [...new Set(meals.map((meal: any) => meal.strCategory).filter((cat: any) => cat && typeof cat === 'string'))].sort();
---

<Layout title={`Recetas de ${displayCountryName}`}>
  <div class="container mx-auto px-4 py-8">
    <div class="flex items-center mb-6">
      <a href="/countries" class="bg-orange-500 text-white py-2 px-4 rounded hover:bg-orange-600 transition-colors">
        ← Volver a Países
      </a>
      <h1 class="text-3xl font-bold ml-4 text-gray-800">Cocina {displayCountryName}</h1>
    </div>

    {error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-8">
        <p class="font-bold">Error:</p>
        <p>{error}</p>
        <p class="mt-2">Por favor, verifica tu conexión a internet e intenta recargar la página.</p>
      </div>
    )}

    {categories.length > 0 && (
      <div class="mb-8">
        <h2 class="text-2xl font-semibold mb-4 text-gray-700">Categorías disponibles:</h2>
        <div class="flex flex-wrap gap-2">
          {categories.map((category: any) => (
            category && typeof category === 'string' ? (
              <a 
                href={`/category/${category.toLowerCase()}`}
                class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors"
              >
                {category}
              </a>
            ) : null
          ))}
        </div>
      </div>
    )}

    {
      meals.length > 0 ? (
        <div>
          <h2 class="text-2xl font-semibold mb-6 text-gray-700">
            Todas las recetas ({meals.length})
          </h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {meals.map((meal: any) => (
              <MealCard client:load meal={meal} />
            ))}
          </div>
        </div>
      ) : (
        <div class="text-center py-12">
          <p class="text-xl text-gray-500 mb-4">
            No se encontraron recetas para la cocina {displayCountryName}.
          </p>
          <a href="/countries" class="text-blue-600 hover:text-blue-800 underline">
            Ver otros países disponibles
          </a>
        </div>
      )
    }
  </div>
</Layout>
