---
import Layout from '../../layouts/Layout.astro';
import MealCard from '../../components/MealCard.jsx';

// Obtenemos el nombre del país desde la URL (ej: /country/italian -> country = "italian")
const { country } = Astro.params;

// Verificamos que country existe y convertimos a formato adecuado para la API
if (!country) {
  return Astro.redirect('/countries');
}

const countryName = country.charAt(0).toUpperCase() + country.slice(1);

// Hacemos la llamada a la API para obtener las comidas de ese país
let meals: any[] = [];
let error = '';

try {
  const response = await fetch(
    `https://www.themealdb.com/api/json/v1/1/filter.php?a=${countryName}`
  );
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  const data = await response.json();
  meals = data.meals || []; // Usamos || [] por si no hay resultados
} catch (e) {
  error = `Error al cargar recetas: ${e instanceof Error ? e.message : 'Error desconocido'}`;
  console.error('Error fetching meals:', e);
}

// Traducciones de países al español
const countryTranslations: { [key: string]: string } = {
  'American': 'Estadounidense',
  'British': 'Británica',
  'Canadian': 'Canadiense',
  'Chinese': 'China',
  'Croatian': 'Croacia',
  'Dutch': 'Holanda',
  'Egyptian': 'Egipto',
  'Filipino': 'Filipinas',
  'French': 'Francia',
  'Greek': 'Grecia',
  'Indian': 'India',
  'Irish': 'Irlanda',
  'Italian': 'Italia',
  'Jamaican': 'Jamaica',
  'Japanese': 'Japón',
  'Kenyan': 'Kenia',
  'Malaysian': 'Malasia',
  'Mexican': 'México',
  'Moroccan': 'Marruecos',
  'Polish': 'Polonia',
  'Portuguese': 'Portugal',
  'Russian': 'Rusia',
  'Spanish': 'España',
  'Thai': 'Tailandia',
  'Tunisian': 'Túnez',
  'Turkish': 'Turquía',
  'Ukrainian': 'Ucrania',
  'Uruguayan': 'Uruguay',
  'Vietnamese': 'Vietnam'
};

const displayCountryName = countryTranslations[countryName] || countryName;

// Obtenemos las categorías únicas de las recetas de este país
const categories = [...new Set(meals.map((meal: any) => meal.strCategory).filter((cat: any) => cat && typeof cat === 'string'))].sort();
---

<Layout title={`Cocina ${displayCountryName} - Recetas`}>
  <div class="px-40 flex flex-1 justify-center py-5">
    <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
      <div class="flex items-center gap-4 px-4 py-3">
        <a href="/countries" class="flex items-center justify-center rounded-lg bg-[#f3e7e8] p-2 text-[#994d51] hover:bg-[#fadcdc] transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256">
            <path d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"></path>
          </svg>
        </a>
        <h1 class="text-2xl font-bold text-[#1b0e0e]">
          Cocina {displayCountryName}
        </h1>
      </div>

      {!error && (
        <div class="px-4 py-3">
          <p class="text-[#994d51] text-base font-normal leading-normal mb-4">
            Explora las deliciosas recetas tradicionales de la cocina {displayCountryName.toLowerCase()}
          </p>
          <div class="flex flex-wrap gap-2">
            {categories.map((category: any) => (
              category && typeof category === 'string' ? (
                <a 
                  href={`/category/${category.toLowerCase()}`}
                  class="bg-[#f3e7e8] text-[#994d51] px-3 py-1 rounded-full text-sm hover:bg-[#994d51] hover:text-white transition-colors"
                >
                  {category}
                </a>
              ) : null
            ))}
          </div>
        </div>
      )}

      {meals.length > 0 ? (
        <div class="px-4">
          <h3 class="text-[#1b0e0e] text-lg font-semibold mb-4">
            Todas las recetas ({meals.length})
          </h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
            {meals.map((meal: any) => (
              <a href={`/meal/${meal.idMeal}`} class="flex flex-col gap-3 pb-3 group cursor-pointer w-full max-w-[220px] justify-self-center">
                <div
                  class="w-full bg-center bg-no-repeat aspect-square bg-cover rounded-lg group-hover:scale-105 transition-transform duration-200"
                  style={`background-image: url("${meal.strMealThumb}");`}
                />
                <div>
                  <p class="text-[#1b0e0e] text-base font-medium leading-normal group-hover:text-[#994d51] transition-colors">{meal.strMeal}</p>
                  <p class="text-[#994d51] text-sm font-normal leading-normal">
                    Ver receta completa
                  </p>
                </div>
              </a>
            ))}
          </div>
        </div>
      ) : !error ? (
        <div class="flex flex-col items-center justify-center gap-4 p-8 text-center">
          <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="#994d51" viewBox="0 0 256 256">
            <path d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"/>
          </svg>
          <p class="text-xl text-[#994d51] font-medium">
            No se encontraron recetas para la cocina {displayCountryName}
          </p>
          <a href="/countries" class="mt-4 rounded-lg bg-[#994d51] px-6 py-2 text-white hover:bg-[#7a3e41] transition-colors">
            Ver otros países disponibles
          </a>
        </div>
      ) : null}
    </div>
  </div>
</Layout>
