---
import Layout from '../../layouts/Layout.astro';
import MealCard from '../../components/MealCard.jsx';

const { country } = Astro.params;

if (!country) {
  return Astro.redirect('/countries');
}

const countryName = country.charAt(0).toUpperCase() + country.slice(1);

// Obtener todas las comidas del país
let meals: any[] = [];
let error = '';

try {
  const response = await fetch(
    `https://www.themealdb.com/api/json/v1/1/filter.php?a=${countryName}`
  );
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  const data = await response.json();
  meals = data.meals || [];
  
  // Obtener los detalles de cada comida para poder filtrar por categoría
  meals = await Promise.all(
    meals.map(async (meal) => {
      const detailResponse = await fetch(
        `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${meal.idMeal}`
      );
      const detailData = await detailResponse.json();
      return { ...meal, ...detailData.meals[0] };
    })
  );

  // Obtener categorías únicas de las comidas de este país
  const uniqueCategories = [...new Set(meals.map(meal => meal.strCategory))].sort();
  
} catch (e) {
  error = `Error al cargar recetas: ${e instanceof Error ? e.message : 'Error desconocido'}`;
  console.error('Error fetching meals:', e);
}

// Obtener categorías únicas de las comidas de este país
const uniqueCategories = [...new Set(meals.map(meal => meal.strCategory))].sort();

// Traducciones de países al español
const countryTranslations: { [key: string]: string } = {
  'American': 'Estadounidense',
  'British': 'Británica',
  'Canadian': 'Canadiense',
  'Chinese': 'China',
  'Chilean': 'Chilena',
  'Croatian': 'Croata',
  'Dutch': 'Holandesa',
  'Egyptian': 'Egipcia',
  'Filipino': 'Filipina',
  'French': 'Francesa',
  'Greek': 'Griega',
  'Indian': 'India',
  'Irish': 'Irlandesa',
  'Italian': 'Italiana',
  'Jamaican': 'Jamaicana',
  'Japanese': 'Japonesa',
  'Kenyan': 'Keniana',
  'Malaysian': 'Malasia',
  'Mexican': 'Mexicana',
  'Moroccan': 'Marroquí',
  'Polish': 'Polaca',
  'Portuguese': 'Portuguesa',
  'Russian': 'Rusa',
  'Spanish': 'Española',
  'Thai': 'Tailandesa',
  'Tunisian': 'Tunecina',
  'Turkish': 'Turca',
  'Vietnamese': 'Vietnamita'
};
---

<Layout title={`Recetas de ${countryTranslations[countryName] || countryName}`}>
  <div class="px-4 md:px-40 flex flex-1 justify-center py-5">
    <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
      <div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-6 px-4">
        <div class="flex flex-col gap-4">
          <a href="/" class="flex items-center gap-2 text-[#994d51] hover:text-[#1b0e0e] transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" fill="currentColor" viewBox="0 0 256 256">
              <path d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"></path>
            </svg>
            Inicio
          </a>
          <h2 class="text-[#1b0e0e] text-[22px] font-bold leading-tight tracking-[-0.015em]">
            Cocina {countryTranslations[countryName] || countryName}
            <span class="ml-2 text-sm font-normal text-gray-500">({meals.length} recetas)</span>
          </h2>
        </div>
        {uniqueCategories.length > 0 && (
          <div class="relative mt-4 md:mt-0">
            <select
              id="categoryFilter"
              class="appearance-none bg-[#f3e7e8] border-none rounded-lg px-4 py-2 pr-10 text-[#994d51] font-medium cursor-pointer hover:bg-[#e9d4d6] transition-colors"
            >
              <option value="">Todas las categorías ({meals.length})</option>
              {uniqueCategories.map((category) => (
                <option value={category}>
                  {category} ({meals.filter(meal => meal.strCategory === category).length})
                </option>
              ))}
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-[#994d51]">
              <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"/>
              </svg>
            </div>
          </div>
        )}
      </div>

      {error && (
        <div class="mx-4 mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
          <p class="font-bold">Error:</p>
          <p>{error}</p>
        </div>
      )}

      <div id="mealsGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 px-4">
        {meals.map((meal) => (
          <div class="meal-card" data-category={meal.strCategory}>
            <MealCard meal={meal} />
          </div>
        ))}
      </div>

      <div id="noResultsMessage" class="hidden text-center py-8">
        <div class="bg-[#f3e7e8] rounded-lg p-6 inline-block">
          <p class="text-[#994d51] font-medium">No hay recetas de esta categoría en la cocina {countryTranslations[countryName]?.toLowerCase() || countryName}</p>
        </div>
      </div>

      {meals.length === 0 && !error && (
        <div class="text-center py-8">
          <div class="bg-[#f3e7e8] rounded-lg p-6 inline-block">
            <p class="text-[#994d51] font-medium">No se encontraron recetas para este país.</p>
          </div>
        </div>
      )}
    </div>
  </div>
</Layout>

<script>
  const categoryFilter = document.getElementById('categoryFilter') as HTMLSelectElement;
  const mealsGrid = document.getElementById('mealsGrid');
  const noResultsMessage = document.getElementById('noResultsMessage');
  const mealCards = document.querySelectorAll('.meal-card');

  categoryFilter?.addEventListener('change', (e) => {
    const selectedCategory = (e.target as HTMLSelectElement).value;
    let visibleCards = 0;
    
    mealCards.forEach((card) => {
      const cardCategory = card.getAttribute('data-category');
      if (!selectedCategory || cardCategory === selectedCategory) {
        (card as HTMLElement).style.display = 'block';
        visibleCards++;
      } else {
        (card as HTMLElement).style.display = 'none';
      }
    });

    // Mostrar/ocultar mensaje de "no hay resultados"
    if (noResultsMessage) {
      if (visibleCards === 0) {
        noResultsMessage.style.display = 'block';
        if (mealsGrid) mealsGrid.style.display = 'none';
      } else {
        noResultsMessage.style.display = 'none';
        if (mealsGrid) mealsGrid.style.display = 'grid';
      }
    }
  });
</script>

<style>
  select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }
</style>
