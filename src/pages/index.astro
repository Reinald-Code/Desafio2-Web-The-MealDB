---
// Importamos el componente Layout que proporciona la estructura básica de la página
import Layout from '../layouts/Layout.astro';

// Definimos la interfaz TypeScript para tipar los datos de las recetas
interface Meal {
  idMeal: string;           // Identificador único de la receta
  strMeal: string;          // Nombre de la receta
  strMealThumb: string;     // URL de la imagen en miniatura
  strInstructions?: string; // Instrucciones de preparación 
}

// Función asíncrona para obtener una receta aleatoria de la API
const getRandomMeal = async () => {
  try {
    // Realizamos la petición a la API
    const response = await fetch('https://www.themealdb.com/api/json/v1/1/random.php');
    
    // Verificamos si la respuesta es exitosa
    if (!response.ok) {
      console.error(`Error HTTP: ${response.status}`);
      return null;
    }
    
    // Convertimos la respuesta a JSON
    const data = await response.json();
    
    // Verificamos si la respuesta tiene la estructura esperada
    if (!data?.meals?.[0]) {
      console.error('Estructura de datos inesperada:', data);
      return null;
    }
    
    // Retornamos la receta tipada
    return data.meals[0] as Meal;
  } catch (error) {
    // Manejamos cualquier error que pueda ocurrir
    if (error instanceof Error) {
      console.error('Error al obtener receta aleatoria:', error.message);
    }
    return null;
  }
};

// Función para obtener un número específico de recetas únicas
const getUniqueMeals = async (count: number) => {
  const meals = [] as Meal[];
  const seenIds = new Set<string>();  // Set para evitar recetas duplicadas
  let attempts = 0;
  const maxAttempts = count * 3;  // Límite de intentos para evitar bucles infinitos
  
  // Intentamos obtener la cantidad solicitada de recetas únicas
  while (meals.length < count && attempts < maxAttempts) {
    attempts++;
    const meal = await getRandomMeal();
    
    // Si la receta es válida y no está duplicada, la agregamos
    if (meal && !seenIds.has(meal.idMeal)) {
      seenIds.add(meal.idMeal);
      meals.push(meal);
    }
  }
  
  return meals;
};

// Obtenemos 15 recetas únicas para mostrar en la página
const uniqueMeals = await getUniqueMeals(15);
---

<!-- Usamos el Layout con un título específico -->
<Layout title="Inicio - Recetas del Mundo">
  <!-- Contenedor principal con padding y centrado -->
  <div class="px-40 flex flex-1 justify-center py-5">
    <!-- Contenedor del contenido con ancho máximo -->
    <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
      <!-- Título de la sección -->
      <h2 class="text-[#1b0e0e] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">
        Recetas Del Día
      </h2>
      
      {/* Renderizado condicional: si hay recetas las mostramos, si no mostramos un mensaje de error */}
      {uniqueMeals.length > 0 ? (
        // Grid responsivo de recetas
        <div class="grid grid-cols-[repeat(auto-fit,minmax(158px,1fr))] gap-3 p-4">
          {/* Iteramos sobre cada receta para mostrarla */}
          {uniqueMeals.map((meal) => (
            // Enlace a la página de detalle de la receta
            <a 
              href={`/meal/${meal.idMeal}`} 
              class="flex flex-col gap-3 pb-3 group cursor-pointer"
            >
              {/* Imagen de la receta con efecto hover */}
              <div
                class="w-full bg-center bg-no-repeat aspect-square bg-cover rounded-lg group-hover:scale-105 transition-transform duration-200"
                style={`background-image: url("${meal.strMealThumb}");`}
              ></div>
              {/* Información de la receta */}
              <div>
                {/* Nombre de la receta con efecto hover */}
                <p class="text-[#1b0e0e] text-base font-medium leading-normal group-hover:text-[#994d51] transition-colors">
                  {meal.strMeal}
                </p>
                {/* Texto de llamada a la acción */}
                <p class="text-[#994d51] text-sm font-normal leading-normal">
                  Ver receta completa
                </p>
              </div>
            </a>
          ))}
        </div>
      ) : (
        // Mensaje de error si no se pudieron cargar las recetas
        <div class="flex flex-col items-center justify-center p-8">
          <p class="text-[#994d51] text-lg font-medium mb-2">
            No se pudieron cargar las recetas
          </p>
          <p class="text-[#1b0e0e] text-sm">
            Por favor, recarga la página para intentar nuevamente
          </p>
        </div>
      )}
    </div>
  </div>
</Layout>