---
// Definimos las interfaces TypeScript para manejar los datos de las recetas
interface Meal {
  idMeal: string;           // Identificador único de la receta
  strMeal: string;          // Nombre de la receta
  strMealThumb: string;     // URL de la imagen en miniatura
  strInstructions?: string; // Instrucciones de preparación (opcional)
}

// Importamos los componentes necesarios para construir la página
import Layout from '../layouts/Layout.astro';
import MealCard from '../components/MealCard.jsx';

// Función que obtiene una receta aleatoria de la API
async function getRandomMeal(): Promise<Meal> {
  const response = await fetch('https://www.themealdb.com/api/json/v1/1/random.php');
  const data = await response.json();
  return data.meals[0];
}

// Obtenemos 12 recetas aleatorias
const mealPromises = Array(12).fill(null).map(() => getRandomMeal());
const meals: Meal[] = await Promise.all(mealPromises);

// Eliminamos posibles recetas duplicadas
const uniqueMeals = Array.from(new Map(meals.map(meal => [meal.idMeal, meal])).values());

---

<Layout title="Inicio - Recetas del Mundo">
  <h1 class="text-3xl font-bold mb-6 text-center">Recetas Aleatorias</h1>

  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
    {uniqueMeals.map((meal) => (
      <MealCard 
        client:load 
        meal={meal} 
      />
    ))}
  </div>
</Layout>