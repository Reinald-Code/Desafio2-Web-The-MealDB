---
// Definimos la interfaz para el tipo Meal
interface Meal {
  idMeal: string;
  strMeal: string;
  strMealThumb: string;
  // Añade más propiedades según necesites
}

import Layout from '../layouts/Layout.astro';
import MealCard from '../components/MealCard.jsx';

// Función para obtener una receta aleatoria
async function getRandomMeal(): Promise<Meal> {
  const response = await fetch('https://www.themealdb.com/api/json/v1/1/random.php');
  const data = await response.json();
  return data.meals[0];
}

// Obtenemos múltiples recetas aleatorias
const mealPromises = Array(12).fill(null).map(() => getRandomMeal());
const meals: Meal[] = await Promise.all(mealPromises);

// Eliminamos posibles duplicados basándonos en el ID
const uniqueMeals = Array.from(new Map(meals.map(meal => [meal.idMeal, meal])).values());
---

<Layout title="Inicio - Recetas del Mundo">
  <h1 class="text-3xl font-bold mb-6 text-center">Recetas Aleatorias</h1>

  <!-- Creamos una grilla para mostrar las tarjetas -->
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
    {
      uniqueMeals.map((meal: Meal) => (
        <MealCard client:load meal={meal} />
      ))
    }
  </div>
</Layout>